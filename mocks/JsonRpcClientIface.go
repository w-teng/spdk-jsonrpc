// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// JsonRpcClientIface is an autogenerated mock type for the JsonRpcClientIface type
type JsonRpcClientIface struct {
	mock.Mock
}

// Call provides a mock function with given fields: method, params
func (_m *JsonRpcClientIface) Call(method string, params interface{}) ([]byte, error) {
	ret := _m.Called(method, params)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, interface{}) []byte); ok {
		r0 = rf(method, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(method, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *JsonRpcClientIface) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewJsonRpcClientIface creates a new instance of JsonRpcClientIface. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewJsonRpcClientIface(t testing.TB) *JsonRpcClientIface {
	mock := &JsonRpcClientIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
